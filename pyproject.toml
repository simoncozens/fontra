[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"


[project]
name = "fontra"
description = "A browser-based font editor"
readme = "README.md"
authors = [
    { name = "Just van Rossum", email = "justvanrossum@gmail.com" }
]
keywords = ["font", "fonts"]
license = {text = "GNU General Public License v3"}
dependencies = [
    "aiohttp>=3.8.1",
    "cattrs>=23.1.2",
    "fonttools[ufo,unicode,woff]>=4.40",
    "watchfiles>=0.10",
    "pyyaml>=6.0.1",
    "ufomerge>=1.8.0",
    "skia-pathops>=0.8.0.post1",
    "pillow>=11.0.0",
]
dynamic = ["version"]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: Console",
    "Environment :: Other Environment",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: JavaScript",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Multimedia :: Graphics",
]


[project.urls]
Documentation = "https://github.com/googlefonts/fontra#readme"
Issues = "https://github.com/googlefonts/fontra/issues"
Source = "https://github.com/googlefonts/fontra"


[project.scripts]
fontra = "fontra.__main__:main"
fontra-copy = "fontra.backends.copy:main"
fontra-workflow = "fontra.workflow.command:main"


[project.entry-points."fontra.views"]
editor = "fontra.client"
fontoverview = "fontra.client"
fontinfo = "fontra.client"
applicationsettings = "fontra.client"


[project.entry-points."fontra.projectmanagers"]
filesystem = "fontra.filesystem.projectmanager:FileSystemProjectManagerFactory"


[project.entry-points."fontra.webcontent"]
localplugins = "fontra.localplugins"


[project.entry-points."fontra.filesystem.backends"]
designspace = "fontra.backends.designspace:DesignspaceBackend"
ufo = "fontra.backends.designspace:UFOBackend"
ttf = "fontra.backends.opentype:OTFBackend"
otf = "fontra.backends.opentype:OTFBackend"
woff = "fontra.backends.opentype:OTFBackend"
woff2 = "fontra.backends.opentype:OTFBackend"
fontra = "fontra.backends.fontra:FontraBackend"
yaml = "fontra.backends.workflow:WorkflowBackend"


[tool.hatch.build.targets.wheel]
packages = ["src/fontra"]
# Items that are ignored in .gitignore, but are added in a build hook
# and must be included in the wheel:
artifacts = ["src/fontra/client/"]


[tool.hatch.version]
source = "vcs"


[tool.hatch.build.hooks.custom]
path = "scripts/bundler_build_hook.py"


[tool.hatch.build.hooks.vcs]
version-file = "src/fontra/_version.py"


[tool.hatch.envs.default]
dependencies = [
  "pytest-asyncio",
  "pytest-cov",
  "pytest",
]


[tool.hatch.envs.default.scripts]
pytest-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/fontra --cov=test-py"


[[tool.hatch.envs.test.matrix]]
python = ["310", "311"]


[tool.coverage.run]
branch = true
parallel = true
omit = [
  "src/fontra/_version.py",
]


[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]


[tool.pytest.ini_options]
testpaths = [
    "test-py",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.mypy]
ignore_missing_imports = true
